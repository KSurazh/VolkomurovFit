/* =========================================================
   VolkomurovFit ‚Äî –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
   - –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é (mobile)
   - –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã (auto/dark/light)
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ (Telegram)
   - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
   ---------------------------------------------------------
   –ö–ª—é—á–∏/ID:
   1) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ (–µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã –≥–¥–µ-—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ):
      window.TELEGRAM_BOT_TOKEN, window.TELEGRAM_CHAT_ID, window.YANDEX_MAPS_API_KEY
   2) –ò–Ω–∞—á–µ ‚Äî –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∏–∂–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã).
   ========================================================= */

/* ====== –ö–û–ù–§–ò–ì (–∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ====== */
const TELEGRAM_BOT_TOKEN_FALLBACK = "8264991850:AAFsRTvk2-YI005iLiuSS5MtS8Wc9sRsVsY";
const TELEGRAM_CHAT_ID_FALLBACK   = "-1004851383447";
const YANDEX_MAPS_API_KEY_FALLBACK = "6dca7c55-faf3-42a1-abf8-c8af616e421e";

/* ====== –ì–ï–¢–¢–ï–†–´ –ö–û–ù–§–ò–ì–ê (—Å–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ, –ø–æ—Ç–æ–º —Ñ–æ–ª–±—ç–∫–∏) ====== */
function getTelegramBotToken() {
  return (typeof window.TELEGRAM_BOT_TOKEN !== "undefined" && window.TELEGRAM_BOT_TOKEN) ?
    window.TELEGRAM_BOT_TOKEN : TELEGRAM_BOT_TOKEN_FALLBACK;
}
function getTelegramChatId() {
  return (typeof window.TELEGRAM_CHAT_ID !== "undefined" && window.TELEGRAM_CHAT_ID) ?
    window.TELEGRAM_CHAT_ID : TELEGRAM_CHAT_ID_FALLBACK;
}
function getYandexApiKey() {
  return (typeof window.YANDEX_MAPS_API_KEY !== "undefined" && window.YANDEX_MAPS_API_KEY) ?
    window.YANDEX_MAPS_API_KEY : YANDEX_MAPS_API_KEY_FALLBACK;
}

/* ====== –£–¢–ò–õ–ò–¢–´ ====== */
const $  = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
const on = (el, ev, fn, opts) => el && el.addEventListener(ev, fn, opts);

function updateMetaThemeColor(hex) {
  let m = document.querySelector('meta[name="theme-color"]');
  if (!m) {
    m = document.createElement("meta");
    m.setAttribute("name", "theme-color");
    document.head.appendChild(m);
  }
  m.setAttribute("content", hex);
}

function showInlineStatus(box, msg, type = "info", timeoutMs = 5000) {
  if (!box) return;
  box.textContent = msg || "";
  box.classList.remove("error", "success", "info");
  box.classList.add(type);
  box.style.display = msg ? "block" : "none";
  box.setAttribute("role", "alert");
  if (timeoutMs > 0 && msg) {
    window.clearTimeout(box.__hideTimer);
    box.__hideTimer = window.setTimeout(() => {
      box.style.display = "none";
      box.textContent = "";
    }, timeoutMs);
  }
}

/* ====== –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –¢–ï–ú–´ ====== */
// –†–∞–±–æ—Ç–∞–µ—Ç —Å CSS: [data-theme="dark"] { ... }
// –†–µ–∂–∏–º—ã: auto ‚Üí dark ‚Üí light ‚Üí auto. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage.
(() => {
  const BTN_SELECTORS = "#theme-toggle, #themeToggle, [data-role='theme-toggle']";
  const STORAGE_KEY = "theme-mode"; // –∑–Ω–∞—á–µ–Ω–∏—è: 'auto' | 'dark' | 'light'
  const mq = window.matchMedia ? window.matchMedia("(prefers-color-scheme: dark)") : null;

  const btn = document.querySelector(BTN_SELECTORS);

  const getMode = () => localStorage.getItem(STORAGE_KEY) || "auto";
  const isSysDark = () => (mq ? mq.matches : false);

  const apply = (mode) => {
    const html = document.documentElement;
    const useDark = mode === "dark" || (mode === "auto" && isSysDark());

    // –ö–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∞–≤–∏–º/—É–±–∏—Ä–∞–µ–º data-theme="dark" –Ω–∞ <html>
    if (useDark) {
      html.setAttribute("data-theme", "dark");
    } else {
      html.removeAttribute("data-theme");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-—Ü–≤–µ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    const meta = document.querySelector('meta[name="theme-color"]') || (() => {
      const m = document.createElement("meta");
      m.setAttribute("name", "theme-color");
      document.head.appendChild(m);
      return m;
    })();
    meta.setAttribute("content", useDark ? "#121212" : "#ffffff");

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç/–∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (btn) {
      const label = mode === "auto" ? "üåì" : useDark ? "üåô" : "‚òÄÔ∏è";
      btn.textContent = label;
      btn.setAttribute("aria-label", `–¢–µ–º–∞: ${mode}`);
      btn.setAttribute("aria-pressed", String(useDark));
    }
  };

  const setMode = (mode) => {
    localStorage.setItem(STORAGE_KEY, mode);
    apply(mode);
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const init = () => apply(getMode());

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init, { once: true });
  } else {
    init();
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: auto -> dark -> light -> auto
  if (btn) {
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      const cur = getMode();
      const next = cur === "auto" ? "dark" : cur === "dark" ? "light" : "auto";
      setMode(next);
    });
  }

  // –°–ª–µ–¥–∏–º –∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π, –µ—Å–ª–∏ —Ä–µ–∂–∏–º ‚Äî auto
  if (mq) {
    mq.addEventListener
      ? mq.addEventListener("change", () => { if (getMode() === "auto") apply("auto"); })
      : mq.addListener && mq.addListener(() => { if (getMode() === "auto") apply("auto"); });
  }
})();

  // –ø–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  apply(getMode());

  // –∫–ª–∏–∫ –ø–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—é
  on(btn, "click", (e) => {
    e.preventDefault();
    const cur = getMode();
    const next = cur === "auto" ? "dark" : cur === "dark" ? "light" : "auto";
    setMode(next);
  });

  // —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã, –µ—Å–ª–∏ —Ä–µ–∂–∏–º ‚Äî auto
  if (mq) {
    on(mq, "change", () => {
      if (getMode() === "auto") apply("auto");
    });
  }
})();

/* ====== –ë–£–†–ì–ï–†-–ú–ï–ù–Æ (–º–æ–±–∏–ª–∫–∞) ====== */
(function initBurger() {
  const burger = $("#burger, .burger, [data-role='burger']");
  const drawer = $("#mobile-drawer, #mobile-nav, .nav-mobile, [data-role='mobile-drawer']");
  const links = $$("#mobile-drawer a, #mobile-nav a, .nav-mobile a, [data-role='mobile-drawer'] a");

  const toggle = (force) => {
    if (!drawer) return;
    const willOpen = typeof force === "boolean" ? force : !drawer.classList.contains("open") && !drawer.classList.contains("active");
    drawer.classList.toggle("open", willOpen);
    drawer.classList.toggle("active", willOpen); // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∏–ª–∏ –∑–∞–≤—è–∑–∞–Ω—ã –Ω–∞ .active
    document.body.classList.toggle("no-scroll", willOpen);
    if (burger) burger.setAttribute("aria-expanded", String(willOpen));
  };

  on(burger, "click", (e) => {
    e.preventDefault();
    toggle();
  });

  links.forEach((a) => on(a, "click", () => toggle(false)));

  on(document, "keydown", (e) => {
    if (e.key === "Escape") toggle(false);
  });
})();

/* ====== –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –§–û–†–ú–ê (Telegram) ====== */
(function initContactForm() {
  const form =
    $("#contactForm, #contact-form, form[data-role='contact'], form.contact-form") ||
    $("section#contacts form") ||
    $("form[action*='telegram']");

  if (!form) return;

  const nameInput    = $("#name, input[name='name'], input[data-name='name']", form) || $("input[type='text']", form);
  const phoneInput   = $("#phone, input[name='phone'], input[type='tel']", form);
  const messageInput = $("#message, textarea[name='message'], textarea[data-name='message']", form) || $("textarea", form);
  let statusBox      = $("#form-status, .form-status, .response", form);
  if (!statusBox) {
    statusBox = document.createElement("div");
    statusBox.id = "form-status";
    statusBox.style.display = "none";
    statusBox.style.marginTop = "8px";
    form.appendChild(statusBox);
  }

  // –ú—è–≥–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ:
  // - –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ñ–∏–∫—Å +7
  // - –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∏ —Å 8 ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ +7
  // - —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∞–∫—Å–∏–º—É–º 11 (7 + 10 —Ü–∏—Ñ—Ä)
  if (phoneInput) {
    on(phoneInput, "input", () => {
      let digits = phoneInput.value.replace(/\D/g, "");
      if (digits.startsWith("8")) digits = "7" + digits.slice(1);
      if (!digits.startsWith("7")) digits = "7" + digits;
      digits = digits.slice(0, 11);
      phoneInput.value = "+" + digits;
    });

    // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å +7
    on(phoneInput, "focus", () => {
      const v = (phoneInput.value || "").trim();
      if (!v) phoneInput.value = "+7";
    });
  }

  const isPhoneValid = () => {
    const v = (phoneInput?.value || "").trim();
    return /^\+7\d{10}$/.test(v);
  };

  let controller = null;

  on(form, "submit", async (e) => {
    e.preventDefault(); // –∫—Ä–∏—Ç–∏—á–Ω–æ: –Ω–µ –ø—Ä—ã–≥–∞—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    const submitBtn = $("button[type='submit'], .form-submit, #submit-btn, button", form);

    const name = (nameInput?.value || "").trim();
    const phone = (phoneInput?.value || "").trim();
    const msg = (messageInput?.value || "").trim();

    // –í–∞–ª–∏–¥–∞—Ü–∏–∏
    if (!isPhoneValid()) {
      showInlineStatus(statusBox, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX", "error");
      phoneInput?.focus();
      return;
    }
    if (!name) {
      showInlineStatus(statusBox, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è", "error");
      nameInput?.focus();
      return;
    }
    if (!msg) {
      showInlineStatus(statusBox, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ", "error");
      messageInput?.focus();
      return;
    }

    // –¢–æ–∫–µ–Ω/—á–∞—Ç ‚Äî –∏–∑ —Ñ–æ—Ä–º—ã (data-*) –∏–ª–∏ –≥–ª–æ–±–∞–ª–∞, –∏–ª–∏ —Ñ–æ–ª–±—ç–∫–∞
    const token  = form.getAttribute("data-bot-token") || getTelegramBotToken();
    const chatId = form.getAttribute("data-chat-id")  || getTelegramChatId();

    if (!token || token.includes("PASTE_YOUR_TELEGRAM_BOT_TOKEN_HERE") || !chatId || chatId.includes("PASTE_YOUR_TELEGRAM_CHAT_ID_HERE")) {
      showInlineStatus(statusBox, "–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ chat_id. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π.", "error");
      return;
    }

    const text =
      `üì© –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞\n` +
      `üë§ –ò–º—è: ${name}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` +
      `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: ${msg}`;

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.setAttribute("aria-busy", "true");
      if (!submitBtn.dataset._label) submitBtn.dataset._label = submitBtn.textContent;
      submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...";
    }

    // –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    if (controller) { try { controller.abort(); } catch(_){} }
    controller = new AbortController();

    try {
      const res = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: chatId, text }),
        signal: controller.signal
      });

      if (!res.ok) {
        const t = await res.text().catch(() => "");
        throw new Error(`Telegram API error: ${res.status} ${t}`);
      }

      showInlineStatus(statusBox, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", "success");
      form.reset();
      if (phoneInput) phoneInput.value = "+7";
    } catch (err) {
      if (err && err.name === "AbortError") {
        showInlineStatus(statusBox, "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.", "error");
      } else {
        console.error("[ContactForm] send error:", err);
        showInlineStatus(statusBox, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "error");
      }
    } finally {
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.removeAttribute("aria-busy");
        if (submitBtn.dataset._label) submitBtn.textContent = submitBtn.dataset._label;
      }
      controller = null;
    }
  });
})();

/* ====== –Ø–ù–î–ï–ö–°.–ö–ê–†–¢–´ ====== */
(function initYandexMap() {
  // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º —Ç–∏—Ö–æ
  const mapEl =
    $("#map, #yandex-map, .yandex-map, [data-role='map']") ||
    document.getElementById("map");
  if (!mapEl) return;

  // –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if ([...document.scripts].some((s) => s.src && s.src.includes("api-maps.yandex.ru/2.1"))) {
    // –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if (window.ymaps && window.ymaps.ready) {
      window.ymaps.ready(initMapInstance);
    } else {
      // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–¥–æ–∂–¥—ë–º
      const t = setInterval(() => {
        if (window.ymaps && window.ymaps.ready) {
          clearInterval(t);
          window.ymaps.ready(initMapInstance);
        }
      }, 200);
    }
    return;
  }

  // –ò–Ω–∞—á–µ ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –∫–ª—é—á–æ–º
  const KEY = getYandexApiKey();
  const src = `https://api-maps.yandex.ru/2.1/?lang=ru_RU${KEY ? "&apikey=" + encodeURIComponent(KEY) : ""}`;
  const s = document.createElement("script");
  s.src = src;
  s.async = true;
  s.onerror = function () {
    console.warn("[Maps] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã");
  };
  s.onload = function () {
    if (window.ymaps && window.ymaps.ready) {
      window.ymaps.ready(initMapInstance);
    }
  };
  document.head.appendChild(s);

  // –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî –ø—Ä–∏–º–µ—Ä—ã, –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  function initMapInstance() {
    if (!window.ymaps) return;
    try {
      const map = new ymaps.Map(mapEl, {
        center: [56.829805, 60.599889],
        zoom: 14,
        controls: ["zoomControl"]
      });

      const placemark = new ymaps.Placemark([56.829805, 60.599889], {
        balloonContent: "–¢—Ä–µ–Ω–µ—Ä –°–µ–º—ë–Ω –í–æ–ª–∫–æ–º—É—Ä–æ–≤"
      }, { preset: "islands#redDotIcon" });

      map.geoObjects.add(placemark);
    } catch (e) {
      console.error("[Maps] init error:", e);
    }
  }
})();
